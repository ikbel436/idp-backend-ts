"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _a, _List_constructArgument;
Object.defineProperty(exports, "__esModule", { value: true });
exports.list = exports.List = void 0;
const utils_1 = require("../utils");
const _1 = require(".");
/**
 * @category Argument
 */
class List extends _1.Argument {
    /**
     * Construct list.
     *
     * @param elements list elements
     */
    constructor(...elements) {
        super(__classPrivateFieldGet(_a, _a, "m", _List_constructArgument).call(_a, elements));
    }
}
exports.List = List;
_a = List, _List_constructArgument = function _List_constructArgument(elements) {
    let str = '[\n';
    elements.forEach((element, i) => {
        str += `${utils_1.Util.argumentValueToString(element)}${i < elements.length - 1 ? ',' : ''}\n`;
    });
    str += ']';
    return str;
};
/**
 * Convenient function to construct new [[List]].
 *
 * @param elements list elements
 *
 * @category Argument
 */
const list = (...elements) => new List(...elements);
exports.list = list;
